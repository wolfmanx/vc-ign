.. -*- coding: utf-8 -*-
.. Copyright (C) 2020, Wolfgang Scherer, <Wolfgang.Scherer at gmx.de>
..
.. This file is part of VC Ignore.
..
.. Permission is granted to copy, distribute and/or modify this document
.. under the terms of the GNU Free Documentation License, Version 1.3
.. or any later version published by the Free Software Foundation;
.. with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
.. A copy of the license is included in the section entitled "GNU
.. Free Documentation License".

.. inline comments (with du_comment_role)
.. role:: rem(comment)
.. role:: html(raw)
   :format: html
.. role:: shx(code)
   :language: sh

.. \||<-snip->|| start
.. \||<-snap->|| alias abbrevs_header skip
.. \||<-snap->|| alias abbrevs_footer skip
.. \||<-snap->|| alias glossary_header skip
.. \||<-snap->|| alias glossary_footer skip
.. \||<-snap->|| alias glossary skip
.. \||<-snap->|| if defined abbrevs_header
.. \||<-snap->|| alias abbrevs_header rem
.. \||<-snap->|| fi
.. \||<-snap->|| if defined abbrevs_footer
.. \||<-snap->|| alias abbrevs_footer rem
.. \||<-snap->|| fi
.. \||<-snap->|| if defined glossary_header
.. \||<-snap->|| alias glossary_header rem
.. \||<-snap->|| fi
.. \||<-snap->|| if defined glossary_footer
.. \||<-snap->|| alias glossary_footer rem
.. \||<-snap->|| fi
.. \||<-snap->|| if defined glossary
.. \||<-snap->|| alias glossary rem
.. \||<-snap->|| fi

.. \||<-snap->|| abbrevs_header
.. raw:: latex

   \iffalse

.. rubric:: Abbreviations
.. raw:: latex

   \fi
   \sdclearpage
   \sdchapter*{Abbreviations}
   \providecommand{\sddlytocignore}[1]{#1\ignorespaces}
   \sddlytocignore{%
   \addcontentsline{toc}{\sdseclevel}{Abbreviations}%
   \markboth{Abbreviations}{Abbreviations}%
   \phantomsection
   }%
.. \||<-snap->|| abbrevs_header

.. \||<-snap->|| glossary_header
.. raw:: latex

   \iffalse

.. rubric:: Glossary
.. raw:: latex

   \fi
   \sdclearpage
   \sdchapter*{Glossary}
   \providecommand{\sddlytocignore}[1]{#1\ignorespaces}
   \sddlytocignore{%
   \addcontentsline{toc}{\sdseclevel}{Glossary}%
   \markboth{Glossary}{Glossary}%
   \phantomsection
   }%
.. \||<-snap->|| glossary_header

abbr <https://en.wikipedia.org/wiki/Abbreviation> | Abbreviation
  As Wikipedia describes it\ [WPABBR]_:

    An abbreviation (from Latin brevis, meaning short) is a shortened
    form of a word or phrase. It consists of a group of letters taken
    from the word or phrase. For example, the word abbreviation can
    itself be represented by the abbreviation :term:`abbr`., :term:`abbrv
    <abbr>`., or :term:`abbrev <abbr>`.

.. \||<-snap->|| glossary |:here:|

.. \||<-snap->|| glossary |:here:|

.. \||<-snap->|| glossary_footer
.. \||<-snap->|| glossary_footer

.. \||<-snap->|| abbrevs_footer
.. \||<-snap->|| abbrevs_footer

.. \||<-snip->|| stop

.. (progn (forward-line 1) (snip-insert "rst_t.ide-update" t t "rst") (insert "\n"))
.. 
.. :ide-menu: Emacs IDE Main Menu - Buffer @BUFFER@
.. . M-x `eIDE-menu' ()(eIDE-menu "z")

.. :ide: CMD: align replace :: substitutions
.. . (progn (and (buffer-file-name) (save-buffer)) (shell-command (concat "sed 's,\",\"\",;s,^,\",;s,$,\",;s/ *replace" "::/\",\"replace" "::/p;d' " (buffer-file-name) " | xlsx-dump.sh --width 0 --header 0 --mode 'text,dense' ")))

.. :ide: +#-
.. . Tools ()

.. :ide: COMPILE: latexpdf
.. . (progn (and (buffer-file-name) (save-buffer)) (compile (concat "make -k latexpdf")))

.. :ide: COMPILE: html
.. . (progn (and (buffer-file-name) (save-buffer)) (compile (concat "make -k html")))

.. :ide: COMPILE: render reST as pseudoXML
.. . (let* ((fp (or (buffer-file-name) (concat default-directory (and (boundp 'sphinx-doc-master) sphinx-doc-master) "README.txt"))) (fn (file-name-nondirectory fp))) (save-match-data (if (string-match-t "[.][^.]*$" fn) (setq fn (replace-match "" nil t fn)))) (let ((args (concat " --traceback " (shell-quote-argument fp) " 2>&1 #| tee " (shell-quote-argument fn) ".pxml"))) (and (buffer-file-name) (save-buffer)) (compile (concat "PATH=\".:$PATH\"; ws_rst2pseudoxml.py " args))))

.. :ide: +#-
.. . Process ()

.. :ide: QUO: ~~ Subsubsection ~~
.. . (insert "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\:rem\:`|\:sec\:|`\\ ::fillme\::\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n" )

.. :ide: QUO: -- Subsection --
.. . (insert "--------------------------------------------------\n\:rem\:`||\:sec\:||`\\ ::fillme\::\n--------------------------------------------------\n" )

.. :ide: QUO: == Section ==
.. . (insert "==================================================\n\:rem\:`|||\:sec\:|||`\\ ::fillme\::\n==================================================\n" )

.. :ide: +#-
.. . Sections ()

.. :ide: OCCUR-OUTLINE:  `|||: sec :|||' + ^.. + command comments
.. . (x-symbol-tag-occur-outline "sec" '("|:" ":|") (cons (cons "^" ".. ") (cons nil nil)) "\\(_`[^`\n]+`\\|\\[[^]\n]+\\]\\|[|][^|\n]+[|]\\|[^:\n]+::\\)")

.. :ide: MENU-OUTLINE:  `|||: sec :|||' + ^.. + command comments
.. . (x-eIDE-menu-outline "sec" '("|:" ":|") (cons (cons "^" ".. ") (cons nil nil)) "\\(_`[^`\n]+`\\|\\[[^]\n]+\\]\\|[|][^|\n]+[|]\\|[^:\n]+::\\)")

.. 
.. Local Variables:
.. mode: rst
.. snip-mode: rst
.. truncate-lines: t
.. symbol-tag-symbol-regexp: "[-0-9A-Za-z_#]\\([-0-9A-Za-z_. ]*[-0-9A-Za-z_]\\|\\)"
.. symbol-tag-auto-comment-mode: nil
.. symbol-tag-srx-is-safe-with-nil-delimiters: nil
.. End:
